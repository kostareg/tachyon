// TODO: double check all usages of commas, semicolons, etc.
// TODO: \sum or @sum?
// TODO: {...} = (...).

// Implementation order:
//  -> basic stuff
//  -> control flow, conditionals
//  -> enums and structs
//  -> ...more

// This file defines basic grammar for the Tachyon programming language.
// Single-line comments start with two forward slashes.

/* 
 * Multi-line comments start with a forward slash and a star,
 * ...
 * and end with a star and a forward slash.
 */

// Variables
n = 5
x = 0.999
b = False
// y = 4.1 + 10.9i // complex numbers

// Unary and binary operators
// neg = -x
// not_b = !b
z = x * (y + 2) - 5 / 2 ^ 3
// l = 3x + (5)(3) // precede x by a number, or ()(), to multiply it

// Anonymous functions, last line of function is return value
// square = fn(x) { x ^ 2 }
square' = fn(x) { return x ^ 2 }
square'' = fn(x: Num) -> Num { return x ^ 2 }

// Function composition
// f = fn(x) { 2x }
// g = fn(x) { 5x }
// h = f . g // same as 10x

// First-class functions
f(fn(x) { x })
// map([1 2 3], fn(x) { x * 2 })

// Partial application of functions
// add = fn(a, b) { a + b }
// add5 = add(5, _) // add5(b) = 5 + b

// Macro for symbolic differentiation, integration
// n = @diff x^2 + sin(x) wrt x
// m = @integ sin(x) of x = 0..pi
// n = 2x + cos(x)
// m = 2

// Control flow
// if x > 0 {
//   y = x
// } else {
//   y = -x
// }

// while x > 0 {
//   x = x - 1
// }

// Data structures and array unpacking
// a = [1 2 3]
// mat = [5 5 5; 1 2 3]
// [a b] = [3 4]

// Modules
import Math // can now use Math.PI
import Math.Genius.Ideas // ./Math/Genius/Ideas.Tachyon

// Expression-only
// x = if a > 0 { a } else { -a }

// Pattern matching
// match expr {
//     0 => "zero"
//     1 => "one"
//     n if n > 1 => "many"
//     _ => "unknown"
// }

// Structs
// Point = struct (x: Num, y: Num)
// MyData = struct {
//   name: Str,
//   something: Num,
// }

// Enumerations
// Shape = enum {
//     Circle(radius: Num)
//     Rect(width: Num, height: Num)
// }

// Unit type
x = ()
y = fn(x) -> () {}

/**
 * Type inference
 *   -> Available for variables and functions
 *   -> Not available for structs and enums: must be self-contained
 *   -> Can always type using x: T syntax.
 *   -> Need to resolve types during compile-time. So if can't reason, fails.
 *   -> Function inferences must be based on body only.
 *   -> There is a TypeCheckPass during compilation.
 */

/*
// Algebraic systems
mysys = @system x, y {
    x + y = 10
    x^2 = 25
}

x = @solve mysys
// x = [
//   @system { x = 5, y = 5 }
//   @system { x = -5, y = 15 }
// ]

// Parametric solutions
n = @system a, b {
     a +  b = 10
    2a + 2b = 20
}
// @solve n = [@system a, b { b = 10 - a }]
// a is not used in the body therefore its free.

// Ordinary Differential Equations
myode = @ode x | t {
    dx = -x
}
// `@solve myode of t = 0..10 with x = 1` returns:
// @system {
//   x = e^(-t)
// }

// Plotting macro
@plot fn(x) { sin(x) } over x = -pi..pi
*/

// Std sum types defined by Result and Option
// enum Result {
//     Ok(value: Str)
//     Err(message: Str)
// }

// match r {
//     Ok(v) => @todo // prints todo and quits
//     Err(msg) => @todo
// }

// String interpolation
// l = "hello, {m}"
