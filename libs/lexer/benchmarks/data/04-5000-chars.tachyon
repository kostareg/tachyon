// this is a Tachyon file for benchmarking the lexer. it contains ~5000 characters of lexable
// Tachyon content. however, some of this code may or may not compile past the lexer. it is meant to
// be a benchmark for the lexer, not as an example of how to write Tachyon programs.

/*
 * Multi-line test comment
 * Contains nested marker /* inside comment
 * Has numbers 123 456 789 and symbols !@#
 * Keywords: fn return import while Unit False True
 */

// Single-line comment tests
// First comment line
// Second comment line
// Third comment line with digits 98765

// Variable assignments
var1 = 1
var2 = 2
var3 = 3.14159
var4 = 4.2
var5 = 5.0
var6 = 6.25
var7 = 7.77
var8 = 8.888
var9 = 9.0
var10 = [10, 11, 12]

// Arithmetic expressions
expr1 = var1 + var2
expr2 = var2 - var1
expr3 = var3 * var4
expr4 = var4 / var2
expr5 = (var1 + var2) * (var3 - var4)
expr6 = 2(3 + 4)
expr7 = (5)(6 + 7)
expr8 = 8var1 + 9(1 + 2)
expr9 = (1 + 1)(2 + 2)
expr10 = (2(3 + 4) - 5)(6 + 7)

// Unary operators
uop1 = -var1
uop2 = -var3
uop3 = !False
uop4 = !True
uop5 = -(var2 + var3)

// Combined operations
comb1 = -var1 * var2 + var3
comb2 = -(var1)(var2) + var3
comb3 = -(var3 + var4)(var5 - var6) - var7

// Function definitions implicit return
idFunc = fn(x) { x }
negFunc = fn(x) { -x }
notFunc = fn(b) { !b }
addFunc = fn(a, b) { a + b }
subFunc = fn(a, b) { a - b }
mulFunc = fn(a, b) { a * b }
divFunc = fn(a, b) { a / b }

// Function definitions explicit return
incFunc = fn(x) { return x + 1; }
decFunc = fn(x) { return x - 1; }
squareFunc = fn(x) { return x * x; }
cubeFunc = fn(x) { return x * x * x; }
powFunc = fn(x, n) {
  result = 1
  i = n
  while i > 0 {
    result = result * x
    i = i - 1
  }
  return result;
}

// Function definition for double
doubleFunc = fn(x) { return x * 2; }

// Function definitions with type annotations
typedFunc1 = fn(x: Num) -> Num { return x + 5; }
typedFunc2 = fn(a: Num, b: Num) -> Num { return a * b - a + b; }

// Nested function definitions
outerFunc = fn(a) {
  innerFunc1 = fn(b) { a + b }
  innerFunc2 = fn(c) { innerFunc1(c) * a }
  return innerFunc2(a)
}

// Function calls
r1 = [idFunc(5), 1, 2, 3]
r2 = negFunc(r1)
r3 = notFunc(False)
r4 = addFunc(2, 3)
r5 = subFunc(5, 2)
r6 = mulFunc(3, 4)
r7 = divFunc(10, 2)
r8 = incFunc(7)
r9 = decFunc(7)
r10 = squareFunc(6)
r11 = cubeFunc(2)
r12 = powFunc(2, 3)
r13 = typedFunc1(8)
r14 = typedFunc2(3, 4)

// Complex function bodies
complexFunc1 = fn(x) {
  a = x + 2
  b = a * a - x
  return b + x
}
complexFunc2 = fn(x, y) {
  sum = x + y
  prod = x * y
  diff = x - y
  result = sum + prod - diff
  return result
}

// While loops simple
countA = 3
while countA > 0 {
  countA = countA - 1
}
countB = 5
while countB > 1 {
  countB = countB - 2
}

// While loops nested
nestedLoop1 = fn(n) {
  i = n
  sum = 0
  while i > 0 {
    j = i
    while j > 0 {
      sum = sum + j
      j = j - 1
    }
    i = i - 1
  }
  return sum
}
resultNested1 = nestedLoop1(4)

// Fibonacci iterative
fibIter = fn(n) {
  a = 0
  b = 1
  i = 0
  while i < n {
    temp = b
    b = a + b
    a = temp
    i = i + 1
  }
  return a
}
fib5 = fibIter(5)

// Factorial iterative
factFunc = fn(n) {
  result = 1
  i = n
  while i > 0 {
    result = result * i
    i = i - 1
  }
  return result
}
fact6 = factFunc(6)

// Sum to n
sumTo = fn(n) {
  total = 0
  i = 1
  while i <= n {
    total = total + i
    i = i + 1
  }
  return total
}
sum10 = sumTo(10)

// Higher order functions
composeFunc = fn(f, g) {
  fn(x) { f(g(x)) }
}
doubleThenInc = composeFunc(incFunc, doubleFunc)
incThenDouble = composeFunc(doubleFunc, incFunc)
test1 = doubleThenInc(3)
test2 = incThenDouble(3)

// More arithmetic variations
varA = 2(3 + 4) - (5 + 6)
varB = (1 + 2)(3 + 4) + (5 + 6)
varC = 7(8)(9)(1)

// Multiple imports
import Math
valPi = Math.PI
valSin = Math.sin(valPi)
valCos = Math.cos(valPi)
valTan = Math.tan(valPi)
valSqrt = Math.sqrt(16)
valAbs = Math.abs(-20)

// Unit type tests
unitA = ()
unitB = fn() -> Unit { return (); }
unitC = fn(x) -> Unit { result = x return (); }

// Deep nested functions
deepFunc = fn(a) {
  fn(b) {
    fn(c) {
      fn(d) {
        return a + b + c + d
      }
    }
  }
}
deepRes = deepFunc(1)(2)(3)(4)

// Complex nested arithmetic
nested1 = ((1 + 2)(3 + 4) - (5 + 6))(7 + 8)
nested2 = (2(3 + 4) + (5)(6 + 7))(8 + 9)

// Test number next to parenthesis multiplication
m1 = 9(10)
m2 = (11)(12)
m3 = 13(14 + 15)
m4 = (16 + 17)18

// Final comment at end
// End of lexer stress test program with wide variety of tokens

// Additional variable assignments
var11 = 11
var12 = 12
var13 = 13.1313
var14 = 14.14
var15 = 15.15
var16 = 16.16
var17 = 17.17
var18 = 18.18
var19 = 19.19
var20 = 20

// Additional arithmetic expressions
expr11 = var11 + var12
expr12 = var13 - var14
expr13 = var15 * var16
expr14 = var17 / var18
expr15 = (var11 + var12)(var13 - var14)
expr16 = 3(4 + 5)(6 + 7)
expr17 = (8 + 9)(10 + 11)
expr18 = [] + 12(13 + 14)(15 + 16)
expr19 = (17 + 18)(19 + 20)
expr20 = (var19 + var20)(var18 - var17)

// More unary operators
uop6 = -var7
uop7 = -var8
uop8 = !False
uop9 = !True
uop10 = -(var9 + var10)

// More combined operations
comb4 = (var11 + var12)(var13 + var14) - var15
comb5 = -var16(17 + 18) + var19
comb6 = (var20 - var11)(var12 + var13)(var14 - var15)

// Final test of code
finalA = chainRes
finalB = tripleRes + r23 - r1 + var25
